// Adafruit_DotStarMatrix example for single DotStar LED matrix.
// Scrolls 'Adafruit' across the matrix.

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_DotStarMatrix.h>
#include <Adafruit_DotStar.h>
#include <Fonts/TomThumb.h>

#define DATAPIN    11
#define CLOCKPIN   13
#define BRIGHTNESS 40


// MATRIX DECLARATION:
// Parameter 1 = width of DotStar matrix
// Parameter 2 = height of matrix
// Parameter 3 = pin number (most are valid)
// Parameter 4 = matrix layout flags, add together as needed:
//   DS_MATRIX_TOP, DS_MATRIX_BOTTOM, DS_MATRIX_LEFT, DS_MATRIX_RIGHT:
//     Position of the FIRST LED in the matrix; pick two, e.g.
//     DS_MATRIX_TOP + DS_MATRIX_LEFT for the top-left corner.
//   DS_MATRIX_ROWS, DS_MATRIX_COLUMNS: LEDs are arranged in horizontal
//     rows or in vertical columns, respectively; pick one or the other.
//   DS_MATRIX_PROGRESSIVE, DS_MATRIX_ZIGZAG: all rows/columns proceed
//     in the same order, or alternate lines reverse direction; pick one.
//   See example below for these values in action.
// Parameter 5 = pixel type:
//   DOTSTAR_BRG  Pixels are wired for BRG bitstream (most DotStar items)
//   DOTSTAR_GBR  Pixels are wired for GBR bitstream (some older DotStars)
//   DOTSTAR_BGR  Pixels are wired for BGR bitstream (APA102-2020 DotStars)

Adafruit_DotStarMatrix matrix = Adafruit_DotStarMatrix(
                                  12, 6, 11, 13,
                                  DS_MATRIX_BOTTOM     + DS_MATRIX_LEFT +
                                  DS_MATRIX_ROWS + DS_MATRIX_PROGRESSIVE,
                                  DOTSTAR_BGR);

const uint16_t primaryColors[] = {
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255)
};

unsigned long previousMillis = 0;        // will store last time LED was updated
unsigned long interval = 1000;
unsigned long dly = 1;

void setup() {
  Serial.begin(115200);

  // uncomment to have wait
  //while (!Serial) delay(500);

  Serial.println("\nDotstar Matrix Wing");
  matrix.begin();
  matrix.setFont(&TomThumb);
  matrix.setTextWrap(false);
  matrix.setBrightness(BRIGHTNESS);
  randomSeed(analogRead(A0));
  for (byte i = 0; i < 3; i++) {
    matrix.fillScreen(primaryColors[i]);
    matrix.show();
    delay(500);
  }
}

void loop() {

  long currentMillis = millis();
    dly = random(8);
  for (byte i = 0; i < 25; i++) {
    if ((i == 0))
    {
      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red on board
      matrix.show();
      i = i + 1;
    }
    else if ((i == 1))
    {
      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red on board
      matrix.fillRect(11, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue on board
      matrix.show();
      i = i + 1;
    }
    else if ((i == 2))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(10, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
      i = i + 1;
      if (dly == 1)
        delay(random(500,2500));
    }
    else if ((i == 3))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(9, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();

    }
    else if ((i == 4))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(8, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 5))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(7, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 6))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(6, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();      
      if (dly == 1)
        delay(0);
      else if (dly == 2)
        delay(random(500,2500));
      else if (dly == 3)
        delay(0);
      else if (dly == 4)
        delay(random(500,2500));
      else if (dly == 5)
        delay(random(500,2500));
      else if (dly == 6)
        delay(random(500,2500));
      else if (dly == 7)
        delay(random(500,2500));
      else if (dly == 8)
        delay(random(500,2500));
        
    }
    else if ((i == 7))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(5, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 8))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(4, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 9))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(3, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 10))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(2, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
      if (dly == 3)
        delay(random(500,2500));
    }
    else if ((i == 11))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(1, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 12))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
      delay(random(2500, 5500));
    }
    else if ((i == 13))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(1, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 14))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(2, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
      if (dly == 4)
       delay(random(500,2500));
      
    }
    else if ((i == 15))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(3, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 16))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(4, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 17))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(5, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 18))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(6, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show(); 
      if (dly == 1)
        delay(random(500,2500));
      else if (dly == 2)
        delay(random(500,2500));
      else if (dly == 3)
        delay(random(500,2500));
      else if (dly == 4)
        delay(0);
      else if (dly == 5)
        delay(0);
      else if (dly == 6)
        delay(random(500,2500));
      else if (dly == 7)
        delay(random(500,2500));
      else if (dly == 8)
        delay(random(500,2500));
    }
    else if ((i == 19))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(7, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 20))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(8, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 21))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(9, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 22))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(10, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
      if (dly == 5)
        delay(random(500,2500));
    }
    else if ((i == 23))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 6, matrix.Color(255, 0, 0)); // Draw red
      matrix.fillRect(11, 0, 12, 6, matrix.Color(0, 0, 255)); // Draw Blue
      matrix.show();
    }
    else if ((i == 24))
    {

      previousMillis = currentMillis;  // Remember the time
      matrix.fillRect(0, 0, 12, 12, matrix.Color(255, 0, 0)); // Draw red
      matrix.show();
    }

  }
  delay(random(2500,5500));
}

